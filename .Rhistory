WG_maps(example_WG_data, "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS/output/test", example_country_data)
WG_maps <- function(SOOS_WG_data, outdir, country_names_data, ...){
# prepare data
WG_names = SOOS_WG_data$Acronym
countries = lapply(SOOS_WG_data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
# check that all countries to be plotted appear in the country lookup table
check = check_country_names(countries, country_names_data)
if(any(check == "Failed")){break}
countries = check
# loop through WG
for(rw in 1:length(WG_names)){
# make plot object
map = plot_WG_map(WG_names[rw], countries[[rw]], ...)
# save plot
save_map(map,WG_names[rw], outdir)
}
print("Sucess! All maps were created")
}
WG_maps(example_WG_data, outdir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS/output/test", counexample_country_data)
traceback()
WG_maps(example_WG_data, outdir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS/output/test", example_country_data)
save_map <- function(plot, WG_name, outdir){
p_name = file.path(outdir, gsub(" ","",paste(WG_name, "_membermap_",format(Sys.Date(), "%Y"),".png", sep = "")))
ggsave(p_name, plot =plot , width = 40, height = 25.8, units = "cm",  device = "png") # asp 1.550668
print(paste(WG_name, "map has been saved as",basename(p_name), "in output directory!"))
}
WG_maps(example_WG_data, outdir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS/output/test", example_country_data)
load("./data/ExampleData.rda")
WG_maps(example_WG_data, outdir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS/output/test", example_country_data, background_colour = "red")
# institution data
inst = lapply(SOOS_WG_data$Affiliations, FUN = function(x){unlist(strsplit(x, split = "; "))})
SOOS_WG_data = example_WG_data
# institution data
inst = lapply(SOOS_WG_data$Affiliations, FUN = function(x){unlist(strsplit(x, split = "; "))})
inst
institutions = inst
# unique list of institutions
unique_institutions = unique(unlist(institutions))
# split by comma where an individual is listed with more than one institution!
unique_institutions = unlist(strsplit(unique_institutions,split = ","))
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
institution_names_data = example_institution_data
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Institution)
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
missing_institutions
# split by comma where an individual is listed with more than one institution!
unique_institutions = unlist(strsplit(unique_institutions,split = "/"))
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# split by comma where an individual is listed with more than one institution!
unique_institutions = unlist(strsplit(unique_institutions,split = "\"))
# split by comma where an individual is listed with more than one institution!
unique_institutions = unlist(strsplit(unique_institutions,split = "\""))
# split by comma where an individual is listed with more than one institution!
unique_institutions = unlist(strsplit(unique_institutions,split = "\\"))
# split by comma where an individual is listed with more than one institution!
unique_institutions =gsub("\\","", unique_institutions,fixed = T)
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
missing()
missing_institutions
gsub("\\""","", missing_institutions[[1]],fixed = T)
gsub("\\,"", missing_institutions[[1]],fixed = T)
"
gsub("\\","", missing_institutions[[1]],fixed = T)
gsub("\\","", missing_institutions[[1]])
gsub("[\\]","", missing_institutions[[1]])
gsub("[\]","", missing_institutions[[1]])
gsub("[\\]","", missing_institutions[[1]], fixed = T)
gsub("[\\\\]","", missing_institutions[[1]], fixed = T)
gsub("[\\\"]","", missing_institutions[[1]], fixed = T)
gsub(("\\"),"", missing_institutions[[1]], fixed = T)
gsub(("\\"),"", as.character(missing_institutions[[1]]), fixed = T)
A = missing_institutions[[1]][1:2]
A
A = substr(missing_institutions[[1]],1,2)
A
A = substr(missing_institutions[[1]],1,1)
A
# unique list of institutions
unique_institutions = unique(unlist(institutions))
# split by comma where an individual is listed with more than one institution!
unique_institutions = unlist(strsplit(unique_institutions,split = ","))
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# split by comma where an individual is listed with more than one institution!
# split by comma where an individual is listed with more than one institution!
unique_institutions = gsub("\"","", unique_institutions,fixed = T)
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
missing_institutions
View(SOOS_WG_data)
# unique list of institutions
unique_institutions = unique(unlist(institutions))
# # split by comma where an individual is listed with more than one institution!
# unique_institutions = unlist(strsplit(unique_institutions,split = ","))
# unique_institutions = trimws(unique_institutions) # trim white space
# unique_institutions = unique(unique_institutions) # make sure unique
# split by comma where an individual is listed with more than one institution!
unique_institutions = gsub("\"","", unique_institutions,fixed = T)
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
pmatch(missing_institutions, institution_names_data$Name, duplicates.ok = t)
pmatch(missing_institutions, institution_names_data$Name, duplicates.ok = T)
pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)
missing_institutions
unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))
setdiff(unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)), c(1:length(missing_institutions)))
check_commas = check_commas[!is.na(check_commas)]
check_commas = setdiff(unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)), c(1:length(missing_institutions)))
check_commas = check_commas[!is.na(check_commas)]
length(unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))
[1] NA 10 20  1 11 35 33  2 28 24 19 36 17 13 23  8 32  6 44 12 34 38 39 16 42 21 22 26 30)
length(unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)))
c(1:length(missing_institutions)
)
# to account for the problem of multiple institutions separated by commas, and commas within institution names
# get the indexes of all that dont have partially matching strings in the lookup file
check_commas = setdiff(unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)), c(1:length(missing_institutions)))
unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))
A =
unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))
# to account for the problem of multiple institutions separated by commas, and commas within institution names
# get the indexes of all that dont have partially matching strings in the lookup file
check_commas = setdiff(c(1:length(missing_institutions), unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))))
# to account for the problem of multiple institutions separated by commas, and commas within institution names
# get the indexes of all that dont have partially matching strings in the lookup file
check_commas = setdiff(c(1:length(missing_institutions)), unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))))
# to account for the problem of multiple institutions separated by commas, and commas within institution names
# get the indexes of all that dont have partially matching strings in the lookup file
check_commas = setdiff(c(1:length(missing_institutions)), unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)))
check_commas
check_commas = check_commas[!is.na(check_commas)]
missing_institutions[check_commas]
View(institution_names_data)
missing_institutions
unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))
# to account for the problem of multiple institutions separated by commas, and commas within institution names
# get the indexes of all that dont have partially matching strings in the lookup file
check_commas = setdiff(c(1:length(missing_institutions)), unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)))
check_commas = check_commas[!is.na(check_commas)]
check_commas
missing_institutions[43]
pmatch(missing_institutions[43], institution_names_data$Name[235])
c(missing_institutions[43], institution_names_data$Name[235])
c(institution_names_data$Name[235],missing_institutions[43])
pmatch( institution_names_data$Name[235],missing_institutions[43])
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
missing_institutions
install.packages(sjmisc)
library(sjmisc)
install.packages("sjmisc")
library(sjmisc)
str_find( institution_names_data$Name[235],missing_institutions[43])
str_find( institution_names_data$Name[235],missing_institutions)
str_find(missing_institutions, institution_names_data$Name[235])
missing_institutions
str_find()
institution_names_data$Name[235]
str_find(missing_institutions, institution_names_data$Name[235], partial = 1)
str_find(missing_institutions, institution_names_data$Name[235])
grepl(missing_institutions, institution_names_data$Name[235])
grepl(institution_names_data$Name[235],missing_institutions)
View(institutions)
which(grepl(institution_names_data$Name[235],missing_institutions))
idx = which(test)
gsub(x,"", missing_institutions[idx])
idx = which(test)
test = grepl(x, missing_institutions)
x = institution_names_data$Name[235]
test = grepl(x, missing_institutions)
idx = which(test)
gsub(x,"", missing_institutions[i])
i = idx
gsub(x,"", missing_institutions[i])
# to account for the problem of multiple institutions separated by commas, and commas within institution names
inst_non_match <- function(x){
test = grepl(x, missing_institutions)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i])
}
}
}
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in missing_institutions){
test = grepl(x, missing_institutions)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i])
}
}
}
missing_institutions
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i])
}
}
}
missing_institutions
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i])
}
}
}
missing_institutions
x = institution_names_data$Name[250]
test = grepl(x, missing_institutions)
test
x
missing_institutions[44]
test = grepl(x, missing_institutions, fixed = T)
x
test
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions, fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i])
}
}
}
missing_institutions
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions, fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i],fixed = T)
}
}
}
missing_institutions
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
grepl("[:alnum:]",missing_institutions)
grepl("[:alpha:]",missing_institutions)
any(grepl("[A-Za-z]",missing_institutions)
# get the indexes of all that dont have partially matching strings in the lookup file
check_commas = setdiff(c(1:length(missing_institutions)), unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)))
check_commas = check_commas[!is.na(check_commas)]
# if there are some that don't have matches
if(length(check_commas) == 0){missing_institutions = NULL}else{missing_institutions = missing_institutions[check_commas]}
# if all of the institutions are there
if(length(missing_institutions) == 0){
#change all names in institutions to ISO3 codes and return
check = lapply(institutions, function(x){institution_names_data[match(x, institution_names_data$Institution),]})
}else{
print("Error: Cannot produce plots!")
print(paste("Not all institutions are in the geocode file. Please check the following institutions, which are missing in the file:",paste(missing_institutions, collapse = ", ")))
check = "Failed"
}
return(check)
}
grepl("[A-Za-z]",missing_institutions)
missing_institutions
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions, fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i],fixed = T)
}
}
}
grepl("[A-Za-z]",missing_institutions)
missing_institutions = missing_institutions[grepl("[A-Za-z]",missing_institutions)]
missingArg()
missing_institutions
check_institution_names <- function(institutions, institution_names_data){
# unique list of institutions
unique_institutions = unique(unlist(institutions))
# # split by comma where an individual is listed with more than one institution!
# unique_institutions = unlist(strsplit(unique_institutions,split = ","))
# unique_institutions = trimws(unique_institutions) # trim white space
# unique_institutions = unique(unique_institutions) # make sure unique
# split by comma where an individual is listed with more than one institution!
unique_institutions = gsub("\"","", unique_institutions,fixed = T)
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions, fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i],fixed = T)
}
}
}
missing_institutions = missing_institutions[grepl("[A-Za-z]",missing_institutions)]
# if all of the institutions are there
if(length(missing_institutions) == 0){
#change all names in institutions to ISO3 codes and return
check = lapply(institutions, function(x){institution_names_data[match(x, institution_names_data$Institution),]})
}else{
print("Error: Cannot produce plots!")
print(paste("Not all institutions are in the geocode file. Please check the following institutions, which are missing in the file:",paste(missing_institutions, collapse = ", ")))
check = "Failed"
}
return(check)
}
check_institution_names(inst, institution_names_data)
check_institution_names <- function(institutions, institution_names_data){
# unique list of institutions
unique_institutions = unique(unlist(institutions))
# # split by comma where an individual is listed with more than one institution!
# unique_institutions = unlist(strsplit(unique_institutions,split = ","))
# unique_institutions = trimws(unique_institutions) # trim white space
# unique_institutions = unique(unique_institutions) # make sure unique
# split by comma where an individual is listed with more than one institution!
unique_institutions = gsub("\"","", unique_institutions,fixed = T)
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions, fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i],fixed = T)
}
}
}
missing_institutions = missing_institutions[grepl("[A-Za-z]",missing_institutions)]
# if all of the institutions are there
if(length(missing_institutions) == 0){
#change all names in institutions to lat/lon
check = "Good"
}else{
print("Error: Cannot produce plots!")
print(paste("Not all institutions are in the geocode file. Please check the following institutions, which are missing in the file:",paste(missing_institutions, collapse = ", ")))
check = "Failed"
}
return(check)
}
check_institution_names(inst, institution_names_data)
rw = 1
WG_name = WG_names[rw]
for(x in institution_names_data$Name){
test = grepl(x, institutions[[t]], fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
institutions[[t]][i] = gsub(x,paste(x, ";", sep = ""), institutions[[t]][i],fixed = T)
}
}
}
# add semicolen to separate institutions
for(t in 1:length(institutions)){
for(x in institution_names_data$Name){
test = grepl(x, institutions[[t]], fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
institutions[[t]][i] = gsub(x,paste(x, ";", sep = ""), institutions[[t]][i],fixed = T)
}
}
}
}
# unique list of institutions
unique_institutions = unique(unlist(institutions))
institutions[[t]]
institutions[[t]][i]
institutions[[t]]
unlist(gsub(";","",strsplit(institutions[[t]][i],split = ";,")))
for(x in institution_names_data$Name){
temp = list()
test = grepl(x, institutions[[t]], fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
institutions[[t]][i] = gsub(x,paste(x, ";", sep = ""), institutions[[t]][i],fixed = T)
# institutions[[t]][i] = substr(institutions[[t]][i],1,nchar(institutions[[t]][i])-1)
}
}
}
inst_clean = institutions[[t]]
if(i == 1){inst_clean = trimws(gsub(";","",unlist(strsplit(institutions[[t]][[i]],split = ";,"))))}
trimws(gsub(";","",unlist(strsplit(institutions[[t]][[i]],split = ";,"))))
institutions[[t]][[i]]
gsub("\"","", institutions[[t]][i],sfixed = T)
institutions[[t]] = inst_clean
unique_institutions = unique(unlist(institutions))
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
print(paste("Warning! The following institutions have no coordinates:", unique(no_ccord) , collapse = ",", sep = ""))
check_institution_names <- function(institutions, institution_names_data){
# add semicolen to separate institutions
plot_df = list()
for(t in 1:length(institutions)){
inst_clean = list()
for(x in institution_names_data$Name){
# test that the institution name from the lookup table appears
test = grepl(x, institutions[[t]], fixed = T)
if(any(test)){
# if the name appears, add a semi colon after the name
idx = which(test)
for(i in idx){
institutions[[t]][i] = gsub("\"","", institutions[[t]][i],fixed = T)
institutions[[t]][i] = gsub(x,paste(x, ";", sep = ""), institutions[[t]][i],fixed = T)
}
}
}
# loop through the listed institutions for a working group and "clean" the names by plitting with the new ";," delimiter
for(i in 1:length(institutions[[t]])){
if(i == 1){inst_clean = trimws(gsub(";","",unlist(strsplit(institutions[[t]][[i]],split = ";,"))))}else{
inst_clean = c(inst_clean, trimws(gsub(";","",unlist(strsplit(institutions[[t]][[i]],split = ";,")))))}
}
# create a data frame for each WG with latitudes and longitude
plot_df[[t]] = data.frame("inst" = inst_clean, "lat" = as.numeric(institution_names_data$Latitude[match(inst_clean, institution_names_data$Name)]), "lon" =  as.numeric(institution_names_data$Longitude[match(inst_clean, institution_names_data$Name)]))
plot_df[[t]] = plot_df[[t]] %>% group_by(inst, lat, lon) %>% mutate(count = n())
# replace institution list
institutions[[t]] = plot_df[[t]]$inst
if(t == 1)(no_coord =plot_df[[t]]$inst[which(is.na(plot_df[[t]]$lat))])}else{
no_coord = c(no_coord, plot_df[[t]]$inst[which(is.na(plot_df[[t]]$lat))])
}
}
projection(in_df) = "+proj=longlat +datum=WGS84"
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
plot_area = c(-20037508, 20037508, -32493690 + 15000000, 18397474 + 5E+05) # c(xmin, xmax, ymin, ymax)
plot_area[1:2] +  c(-5E+05, 5E+05)
roxygen2::roxygenise()
roxygen2::roxygenise()
length(ISO3)
nrow(WG_countries)
WG_countries$ISO3
# find countries that are not in the lookup table
missing_countries = setdiff(unique_countries, country_names_data$Country)
# change all names in countries to ISO3 codes
countries_ed = countries
for(e in length(countries)){
countries_ed[[e]] = gsub("United States ", "United States", countries_ed[[e]])
}
for(x in institution_names_data$Name){
# test that the institution name from the lookup table appears
test = grepl(x, institutions[[t]], fixed = T)
if(any(test)){
# if the name appears, add a semi colon after the name
idx = which(test)
for(i in idx){
institutions[[t]][i] = gsub("\"","", institutions[[t]][i],fixed = T)
institutions[[t]][i] = gsub(x,paste(x, ";", sep = ""), institutions[[t]][i],fixed = T)
}
}
}
for(x in institution_names_data$Name){
# test that the institution name from the lookup table appears
test = grepl(x, institutions[[t]], fixed = T)
if(any(test)){
# if the name appears, add a semi colon after the name
idx = which(test)
for(i in idx){
institutions[[t]][i] = gsub("\"","", institutions[[t]][i],fixed = T)
institutions[[t]][i] = gsub(x,paste(x, ";", sep = ""), institutions[[t]][i],fixed = T)
}
}
}
# loop through the listed institutions for a working group and "clean" the names by splitting with the new ";," delimiter
for(i in 1:length(institutions[[t]])){
if(i == 1){inst_clean[[t]] = trimws(gsub(";","",unlist(strsplit(institutions[[t]][[i]],split = ";,"))))}else{
inst_clean[[t]] = c(inst_clean[[t]], trimws(gsub(";","",unlist(strsplit(institutions[[t]][[i]],split = ";,")))))}
}
# create a data frame for each WG with latitudes and longitude
plot_df[[t]] = data.frame("inst" = inst_clean[[t]], "lat" = as.numeric(institution_names_data$Latitude[match(inst_clean[[t]], institution_names_data$Name)]), "lon" =  as.numeric(institution_names_data$Longitude[match(inst_clean[[t]], institution_names_data$Name)]))
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
