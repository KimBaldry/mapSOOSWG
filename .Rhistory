panel.grid.minor = element_blank(),axis.ticks=element_blank(), axis.text = element_blank())
return(baseWO)
}
# for development/debugging
maindir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS"
filename = file.path(maindir, "data", "exampleWGlist.txt")
lookupfile = file.path(maindir, "data", "country_lookup_table.txt")
outdir = file.path(maindir, "output","style1")
data = read.csv(filename, header = T,  stringsAsFactors = F)
colnames(data) = gsub("ï..","",colnames(data)) # this is a bug that can occur from excel (yay excel)
print(paste(basename(filename), "sucessfully opened"))
# prepare data
WG_names = data$Acronym
countries = lapply(data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
# check that all countries to be plotted appear in the country lookup table
check = check_country_names(countries, lookupfile)
if(any(check == "Failed")){break}
countries = check
# loop through WG
for(rw in 1:length(WG_names)){
# make plot object
map = plot_WG_map_style1(WG_names[rw], countries[[rw]])
# save plot
save_map(map,WG_names[rw], outdir)
}
print("Sucess! All maps were created")
plot_WG_map <- function(WG_name, WG_countries){
# SOOS colours: Light Blue, Dark Blue, Light Tan, Dark Tan, Dark Green
SOOScol = c("#00aeef", "#0073ae","#f1f3f4" ,"#c5c0bb", "#8dc63f")
# Create a data frame that has an indicator for participating countries
# This will allow us to colour countries
countDF = data.frame(country = WG_countries,
participation = rep(1, length(WG_countries)))
Map = joinCountryData2Map(countDF, joinCode = "ISO3",
nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
Map = spTransform(Map, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
map_data = tidy(Map)
sub_Map =Map@data[,c("ADMIN","ISO3","participation")]
colnames(sub_Map)[1] = c("id")
map_data = data.table(left_join(map_data, sub_Map))
# Create a data from for the centroids of countries. This will allow up to put pins at locations
wmap <- getMap(resolution="less islands")[-which(getMap()$ADMIN=="Antarctica"),]
wmap = spTransform(wmap, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
ext_wmap = extent(wmap)
buffer = 5E+05
ext_wmap[c(1,3)] = ext_wmap[c(1,3)] - buffer
ext_wmap[c(2,4)] = ext_wmap[c(2,4)] + buffer
# get centroids
centroids = gCentroid(wmap, byid=TRUE)
centroids_df = as.data.frame(centroids)
centroids_df = centroids_df[match(sub_Map$id[which(sub_Map$participation == 1)], rownames(centroids_df)),]
centroids_df$image  = file.path(.libPaths()[1],"mapSOOSWG", "marker.png")
# This is the baseplot code for the map
baseWO =  ggplot() +
geom_rect(aes(xmin = ext_wmap[1],xmax = ext_wmap[2], ymin = ext_wmap[3], ymax = ext_wmap[4]),size = 1, color = "black", fill = SOOScol[3])+
geom_polygon(data =map_data, aes(x = long, y = lat, group = group),fill = SOOScol[4], colour = SOOScol[4]) +
# we just plot red polygons over the top to avoid having to use scale_fill twice
geom_polygon(data =map_data[participation == 1], aes(x = long, y = lat, group = group), fill = SOOScol[1], colour = SOOScol[1], lwd = 0.5) +
xlab("") +
ylab("") +
#geom_point(data = df, aes(x=x, y=y), col = colours[5], cex = 3) +
geom_image(data = centroids_df, aes(x = x, y=y, image = image), size = 0.02, asp =1.5)+ # add asp (aspect ratio width:height). Add nudge
geom_rect(aes(xmin = ext_wmap[1],xmax = ext_wmap[2], ymin = ext_wmap[3], ymax = ext_wmap[4]),size = 1, color = "black", fill = NA)+
# Adds axes
# Change theme to remove axes and ticks
theme(panel.background = element_blank(),legend.position = "none",
panel.grid.minor = element_blank(),axis.ticks=element_blank(), axis.text = element_blank())
return(baseWO)
}
data = read.csv(filename, header = T,  stringsAsFactors = F)
colnames(data) = gsub("ï..","",colnames(data)) # this is a bug that can occur from excel (yay excel)
print(paste(basename(filename), "sucessfully opened"))
# prepare data
WG_names = data$Acronym
countries = lapply(data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
# check that all countries to be plotted appear in the country lookup table
check = check_country_names(countries, lookupfile)
if(any(check == "Failed")){break}
countries = check
# loop through WG
for(rw in 1:length(WG_names)){
# make plot object
map = plot_WG_map_style1(WG_names[rw], countries[[rw]])
# save plot
save_map(map,WG_names[rw], outdir)
}
print("Sucess! All maps were created")
plot_WG_map_style1 <- function(WG_name, WG_countries){
# SOOS colours: Light Blue, Dark Blue, Light Tan, Dark Tan, Dark Green
SOOScol = c("#00aeef", "#0073ae","#f1f3f4" ,"#c5c0bb", "#8dc63f")
# Create a data frame that has an indicator for participating countries
# This will allow us to colour countries
countDF = data.frame(country = WG_countries,
participation = rep(1, length(WG_countries)))
Map = joinCountryData2Map(countDF, joinCode = "ISO3",
nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
Map = spTransform(Map, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
map_data = tidy(Map)
sub_Map =Map@data[,c("ADMIN","ISO3","participation")]
colnames(sub_Map)[1] = c("id")
map_data = data.table(left_join(map_data, sub_Map))
# Create a data from for the centroids of countries. This will allow up to put pins at locations
wmap <- getMap(resolution="less islands")[-which(getMap()$ADMIN=="Antarctica"),]
wmap = spTransform(wmap, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
ext_wmap = extent(wmap)
buffer = 5E+05
ext_wmap[c(1,3)] = ext_wmap[c(1,3)] - buffer
ext_wmap[c(2,4)] = ext_wmap[c(2,4)] + buffer
# get centroids
centroids = gCentroid(wmap, byid=TRUE)
centroids_df = as.data.frame(centroids)
centroids_df = centroids_df[match(sub_Map$id[which(sub_Map$participation == 1)], rownames(centroids_df)),]
centroids_df$image  = file.path(.libPaths()[1],"mapSOOSWG", "marker.png")
# This is the baseplot code for the map
baseWO =  ggplot() +
geom_rect(aes(xmin = ext_wmap[1],xmax = ext_wmap[2], ymin = ext_wmap[3], ymax = ext_wmap[4]),size = 1, color = "black", fill = SOOScol[3])+
geom_polygon(data =map_data, aes(x = long, y = lat, group = group),fill = SOOScol[4], colour = SOOScol[4]) +
# we just plot red polygons over the top to avoid having to use scale_fill twice
geom_polygon(data =map_data[participation == 1], aes(x = long, y = lat, group = group), fill = SOOScol[1], colour = SOOScol[1], lwd = 0.5) +
xlab("") +
ylab("") +
#geom_point(data = df, aes(x=x, y=y), col = colours[5], cex = 3) +
geom_image(data = centroids_df, aes(x = x, y=y, image = image), size = 0.02, asp =1.5)+ # add asp (aspect ratio width:height). Add nudge
geom_rect(aes(xmin = ext_wmap[1],xmax = ext_wmap[2], ymin = ext_wmap[3], ymax = ext_wmap[4]),size = 1, color = "black", fill = NA)+
# Adds axes
# Change theme to remove axes and ticks
theme(panel.background = element_blank(),legend.position = "none",
panel.grid.minor = element_blank(),axis.ticks=element_blank(), axis.text = element_blank())
return(baseWO)
}
data = read.csv(filename, header = T,  stringsAsFactors = F)
colnames(data) = gsub("ï..","",colnames(data)) # this is a bug that can occur from excel (yay excel)
print(paste(basename(filename), "sucessfully opened"))
# prepare data
WG_names = data$Acronym
countries = lapply(data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
# check that all countries to be plotted appear in the country lookup table
check = check_country_names(countries, lookupfile)
if(any(check == "Failed")){break}
countries = check
# loop through WG
for(rw in 1:length(WG_names)){
# make plot object
map = plot_WG_map_style1(WG_names[rw], countries[[rw]])
# save plot
save_map(map,WG_names[rw], outdir)
}
print("Sucess! All maps were created")
# read the lookup file
country_LT = read.csv(lookupfile, header = T, stringsAsFactors = F,strip.white = T)
# unique list of countries
unique_countries = unique(unlist(countries))
# split by comma where an individual is listed with more than one country!
unique_countries = unlist(strsplit(unique_countries,split = ","))
unique_countries = trimws(unique_countries) # trim white space
unique_countries = unique(unique_countries) # make sure unique
# find countries that are not in the lookup table
missing_countries = setdiff(unique_countries, country_LT$Country)
maindir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS"
filename = file.path(maindir, "data", "exampleWGlist.txt")
outdir = file.path(maindir, "output","style1")
lookupfile = file.path(maindir, "data", "country_lookup_table.txt")
# read the file
data = read.csv(filename, header = T,  stringsAsFactors = F)
colnames(data) = gsub("ï..","",colnames(data)) # this is a bug that can occur from excel (yay excel)
print(paste(basename(filename), "sucessfully opened"))
# prepare data
WG_names = data$Acronym
countries = lapply(data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
filename = file.path(maindir, "inst", "SOOSWG_list_09022020.csv")
outdir = file.path(maindir, "output","style1")
lookupfile = file.path(maindir, "data", "country_lookup_table.txt")
# read the file
data = read.csv(filename, header = T,  stringsAsFactors = F)
filename = file.path(maindir, "data", "SOOSWG_list_09022020.csv")
outdir = file.path(maindir, "output","style1")
lookupfile = file.path(maindir, "data", "country_lookup_table.txt")
# read the file
data = read.csv(filename, header = T,  stringsAsFactors = F)
colnames(data) = gsub("ï..","",colnames(data)) # this is a bug that can occur from excel (yay excel)
print(paste(basename(filename), "sucessfully opened"))
# prepare data
WG_names = data$Acronym
countries = lapply(data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
# check that all countries to be plotted appear in the country lookup table
check = check_country_names(countries, lookupfile)
# read the lookup file
country_LT = read.csv(lookupfile, header = T, stringsAsFactors = F,strip.white = T)
# unique list of countries
unique_countries = unique(unlist(countries))
# split by comma where an individual is listed with more than one country!
unique_countries = unlist(strsplit(unique_countries,split = ","))
unique_countries = trimws(unique_countries) # trim white space
unique_countries = unique(unique_countries) # make sure unique
# find countries that are not in the lookup table
missing_countries = setdiff(unique_countries, country_LT$Country)
maindir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS"
filename = file.path(maindir, "data", "SOOSWG_list_09022020.csv")
outdir = file.path(maindir, "output","style1")
lookupfile = file.path(maindir, "data", "country_lookup_table.txt")
check_country_names <- function(countries, lookupfile){
# read the lookup file
country_LT = read.csv(lookupfile, header = T, stringsAsFactors = F,strip.white = T)
# unique list of countries
unique_countries = unique(unlist(countries))
# split by comma where an individual is listed with more than one country!
unique_countries = unlist(strsplit(unique_countries,split = ","))
unique_countries = trimws(unique_countries) # trim white space
unique_countries = unique(unique_countries) # make sure unique
# find countries that are not in the lookup table
missing_countries = setdiff(unique_countries, country_LT$Country)
# if all of the countries are there
if(length(missing_countries) == 0){
#change all names in countries to ISO3 codes and return
check = lapply(countries, function(x){country_LT$ISO3_name[match(x, country_LT$Country)]})
}else{
print("Error: Cannot produce plots!")
print(paste("Not all countries are in the lookupfile. Please check the following countries, which are missing in the file:",paste(missing_countries, collapse = ", ")))
check = "Failed"
}
return(check)
}
# read the file
data = read.csv(filename, header = T,  stringsAsFactors = F)
colnames(data) = gsub("ï..","",colnames(data)) # this is a bug that can occur from excel (yay excel)
print(paste(basename(filename), "sucessfully opened"))
# prepare data
WG_names = data$Acronym
countries = lapply(data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
# check that all countries to be plotted appear in the country lookup table
check = check_country_names(countries, lookupfile)
if(any(check == "Failed")){break}
countries = check
# loop through WG
for(rw in 1:length(WG_names)){
# make plot object
map = plot_WG_map_style1(WG_names[rw], countries[[rw]])
# save plot
save_map(map,WG_names[rw], outdir)
}
#' @title Draw a single SOOS Working Group Map
#'
#' @author Kimberlee Baldry
#' @description This script contains a function to draw a map for a single working group.
#'
#' @note In development
#'
#' @return A ggplot object
#' @param WG_name Name of the WG to be plotted
#' @param WG_countries Character vector of the ISO3 codes of WG member countries
#'
#' @import ggplot2
#' @import data.table
#' @import broom
#' @import rgeos
#' @import rworldmap
#' @import ggimage
#' @import tidyverse
#'
#' @export
# for development/debugging
# WG_name = WG_names[rw]
# WG_countries = countries[[rw]]
plot_WG_map_style1 <- function(WG_name, WG_countries){
# SOOS colours: Light Blue, Dark Blue, Light Tan, Dark Tan, Dark Green
SOOScol = c("#00aeef", "#0073ae","#f1f3f4" ,"#c5c0bb", "#8dc63f")
# Create a data frame that has an indicator for participating countries
# This will allow us to colour countries
countDF = data.frame(country = WG_countries,
participation = rep(1, length(WG_countries)))
Map = joinCountryData2Map(countDF, joinCode = "ISO3",
nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
Map = spTransform(Map, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
map_data = tidy(Map)
sub_Map =Map@data[,c("ADMIN","ISO3","participation")]
colnames(sub_Map)[1] = c("id")
map_data = data.table(left_join(map_data, sub_Map))
# Create a data from for the centroids of countries. This will allow up to put pins at locations
wmap <- getMap(resolution="less islands")[-which(getMap()$ADMIN=="Antarctica"),]
wmap = spTransform(wmap, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
ext_wmap = extent(wmap)
buffer = 5E+05
ext_wmap[c(1,3)] = ext_wmap[c(1,3)] - buffer
ext_wmap[c(2,4)] = ext_wmap[c(2,4)] + buffer
# get centroids
centroids = gCentroid(wmap, byid=TRUE)
centroids_df = as.data.frame(centroids)
centroids_df = centroids_df[match(sub_Map$id[which(sub_Map$participation == 1)], rownames(centroids_df)),]
centroids_df$image  = file.path(.libPaths()[1],"mapSOOSWG", "marker.png")
# This is the baseplot code for the map
baseWO =  ggplot() +
geom_rect(aes(xmin = ext_wmap[1],xmax = ext_wmap[2], ymin = ext_wmap[3], ymax = ext_wmap[4]),size = 1, color = "black", fill = SOOScol[3])+
geom_polygon(data =map_data, aes(x = long, y = lat, group = group),fill = SOOScol[4], colour = SOOScol[4]) +
# we just plot red polygons over the top to avoid having to use scale_fill twice
geom_polygon(data =map_data[participation == 1], aes(x = long, y = lat, group = group), fill = SOOScol[1], colour = SOOScol[1], lwd = 0.5) +
xlab("") +
ylab("") +
#geom_point(data = df, aes(x=x, y=y), col = colours[5], cex = 3) +
geom_image(data = centroids_df, aes(x = x, y=y, image = image), size = 0.02, asp =1.5)+ # add asp (aspect ratio width:height). Add nudge
geom_rect(aes(xmin = ext_wmap[1],xmax = ext_wmap[2], ymin = ext_wmap[3], ymax = ext_wmap[4]),size = 1, color = "black", fill = NA)+
# Adds axes
# Change theme to remove axes and ticks
theme(panel.background = element_blank(),legend.position = "none",
panel.grid.minor = element_blank(),axis.ticks=element_blank(), axis.text = element_blank())
return(baseWO)
}
# loop through WG
for(rw in 1:length(WG_names)){
# make plot object
map = plot_WG_map_style1(WG_names[rw], countries[[rw]])
# save plot
save_map(map,WG_names[rw], outdir)
}
# loop through WG
for(rw in 1:length(WG_names)){
# make plot object
map = plot_WG_map_style2(WG_names[rw], countries[[rw]])
# save plot
save_map(map,WG_names[rw], outdir)
}
#' @title Draw a single SOOS Working Group Map
#'
#' @author Kimberlee Baldry
#' @description This script contains a function to draw a map for a single working group.
#'
#' @note In development
#'
#' @return A ggplot object
#' @param WG_name Name of the WG to be plotted
#' @param WG_countries Character vector of the ISO3 codes of WG member countries
#'
#' @import ggplot2
#' @import data.table
#' @import broom
#' @import rgeos
#' @import rworldmap
#' @import ggimage
#' @import tidyverse
#'
#' @export
# for development/debugging
# WG_name = WG_names[rw]
# WG_countries = countries[[rw]]
plot_WG_map_style2 <- function(WG_name, WG_countries){
SOOScol = c("#00aeef", "#0073ae","#f1f3f4" ,"#c5c0bb", "#8dc63f")
# Create a data frame that has an indicator for participating countries
# This will allow us to colour countries
countDF = data.frame(country = WG_countries,
participation = rep(1, length(WG_countries)))
Map = joinCountryData2Map(countDF, joinCode = "ISO3",
nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
Map = spTransform(Map, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
map_data = tidy(Map)
sub_Map =Map@data[,c("ADMIN","ISO3","participation")]
colnames(sub_Map)[1] = c("id")
map_data = data.table(left_join(map_data, sub_Map))
# Create a data from for the centroids of countries. This will allow up to put pins at locations
wmap <- getMap(resolution="less islands")[-which(getMap()$ADMIN=="Antarctica"),]
wmap = spTransform(wmap, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
ext_wmap = extent(wmap)
buffer = 5E+05
ext_wmap[c(1,3)] = ext_wmap[c(1,3)] - buffer
ext_wmap[c(2,4)] = ext_wmap[c(2,4)] + buffer
# get centroids
centroids = gCentroid(wmap, byid=TRUE)
centroids_df = as.data.frame(centroids)
centroids_df = centroids_df[match(sub_Map$id[which(sub_Map$participation == 1)], rownames(centroids_df)),]
centroids_df$image  = file.path(.libPaths()[1],"mapSOOSWG", "marker3.png")
# This is the baseplot code for the map
baseWO =  ggplot() +
geom_rect(aes(xmin = ext_wmap[1],xmax = ext_wmap[2], ymin = ext_wmap[3], ymax = ext_wmap[4]),size = 1, color = "black", fill = SOOScol[3])+
geom_polygon(data =map_data, aes(x = long, y = lat, group = group),fill = SOOScol[4], colour = SOOScol[4]) +
# we just plot red polygons over the top to avoid having to use scale_fill twice
geom_polygon(data =map_data[participation == 1], aes(x = long, y = lat, group = group), fill = SOOScol[1], colour = SOOScol[1], lwd = 0.5) +
xlab("") +
ylab("") +
#geom_point(data = df, aes(x=x, y=y), col = colours[5], cex = 3) +
geom_image(data = centroids_df, aes(x = x, y=y, image = image), size = 0.02, asp =1.5)+ # add asp (aspect ratio width:height). Add nudge
geom_rect(aes(xmin = ext_wmap[1],xmax = ext_wmap[2], ymin = ext_wmap[3], ymax = ext_wmap[4]),size = 1, color = "black", fill = NA)+
# Adds axes
# Change theme to remove axes and ticks
theme(panel.background = element_blank(),legend.position = "none",
panel.grid.minor = element_blank(),axis.ticks=element_blank(), axis.text = element_blank())
return(baseWO)
}
# loop through WG
for(rw in 1:length(WG_names)){
# make plot object
map = plot_WG_map_style2(WG_names[rw], countries[[rw]])
# save plot
save_map(map,WG_names[rw], outdir)
}
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(roxygen2)
roxygenize()
### Calculate centroids
# Create a data from for the centroids of countries. This will allow up to put pins at locations
wmap <- getMap(resolution="less islands")[-which(getMap()$ADMIN=="Antarctica"),]
wmap = spTransform(wmap, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
### to add a buffer around the plot area
ext_wmap = extent(wmap)
ext_wmap
### Define plot area
plot_area = c(-20037508, 20037508, -32493690 + 15000000, 18397474 + 5E+05)
### Get basemap data
wmap <- getMap(resolution="less islands")[-which(getMap()$ADMIN=="Antarctica"),]
wmap = spTransform(wmap, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
### Get basemap data
wmap <- getMap(resolution="less islands")[-which(getMap()$ADMIN=="Antarctica"),]
wmap = spTransform(wmap, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
A = tidy(wmap)
library(sf)
library(rgdal)
ant = readOGR(dsn = "./data/Antarctica", layer = "Antarctica",)
ant = st_read("./data/Antarctica/Antarctica.shp")
ant = st_transform(ant, crs = "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
ant = st_crop(ant, xmin = -20037510, ymin = -32493690 + 15000000, xmax = 20037510, ymax = -8475436)
## baseplot
baseWO = ggplot() +
# plot background box
geom_rect(aes(xmin = plot_area[1],xmax = plot_area[2], ymin = plot_area[3], ymax = plot_area[4]),size = 1, color = "black", fill = SOOScol[3])+
# plot whole world
geom_polygon(data =A, aes(x = long, y = lat, group = group),fill = SOOScol[4], colour = SOOScol[4]) +
# plot antarctica. Antarctica is hard! This uses "ant" from the package data
geom_sf(data = ant,fill = SOOScol[4], colour = SOOScol[4]) +
# plot the box border
geom_rect(aes(xmin = plot_area[1],xmax = plot_area[2], ymin = plot_area[3], ymax = plot_area[4]),size = 1, color = "black", fill = NA)+
xlab("") +
ylab("") +
# Change theme to remove axes and ticks
theme(panel.background = element_blank(),legend.position = "none",
panel.grid.minor = element_blank(),axis.ticks=element_blank(), axis.text = element_blank())+
}
baseWO = ggplot() +
# plot background box
geom_rect(aes(xmin = plot_area[1],xmax = plot_area[2], ymin = plot_area[3], ymax = plot_area[4]),size = 1, color = "black", fill = SOOScol[3])+
# plot whole world
geom_polygon(data =A, aes(x = long, y = lat, group = group),fill = SOOScol[4], colour = SOOScol[4]) +
# plot antarctica. Antarctica is hard! This uses "ant" from the package data
geom_sf(data = ant,fill = SOOScol[4], colour = SOOScol[4]) +
# plot the box border
geom_rect(aes(xmin = plot_area[1],xmax = plot_area[2], ymin = plot_area[3], ymax = plot_area[4]),size = 1, color = "black", fill = NA)+
xlab("") +
ylab("") +
# Change theme to remove axes and ticks
theme(panel.background = element_blank(),legend.position = "none",
panel.grid.minor = element_blank(),axis.ticks=element_blank(), axis.text = element_blank())+
)
## baseplot
baseWO = ggplot() +
# plot background box
geom_rect(aes(xmin = plot_area[1],xmax = plot_area[2], ymin = plot_area[3], ymax = plot_area[4]),size = 1, color = "black", fill = SOOScol[3])+
# plot whole world
geom_polygon(data =A, aes(x = long, y = lat, group = group),fill = SOOScol[4], colour = SOOScol[4]) +
# plot antarctica. Antarctica is hard! This uses "ant" from the package data
geom_sf(data = ant,fill = SOOScol[4], colour = SOOScol[4]) +
# plot the box border
geom_rect(aes(xmin = plot_area[1],xmax = plot_area[2], ymin = plot_area[3], ymax = plot_area[4]),size = 1, color = "black", fill = NA)+
xlab("") +
ylab("") +
# Change theme to remove axes and ticks
theme(panel.background = element_blank(),legend.position = "none",
panel.grid.minor = element_blank(),axis.ticks=element_blank(), axis.text = element_blank())
SOOScol = c("#00aeef", "#0073ae","#f1f3f4" ,"#c5c0bb", "#8dc63f")
## baseplot
baseWO = ggplot() +
# plot background box
geom_rect(aes(xmin = plot_area[1],xmax = plot_area[2], ymin = plot_area[3], ymax = plot_area[4]),size = 1, color = "black", fill = SOOScol[3])+
# plot whole world
geom_polygon(data =A, aes(x = long, y = lat, group = group),fill = SOOScol[4], colour = SOOScol[4]) +
# plot antarctica. Antarctica is hard! This uses "ant" from the package data
geom_sf(data = ant,fill = SOOScol[4], colour = SOOScol[4]) +
# plot the box border
geom_rect(aes(xmin = plot_area[1],xmax = plot_area[2], ymin = plot_area[3], ymax = plot_area[4]),size = 1, color = "black", fill = NA)+
xlab("") +
ylab("") +
# Change theme to remove axes and ticks
theme(panel.background = element_blank(),legend.position = "none",
panel.grid.minor = element_blank(),axis.ticks=element_blank(), axis.text = element_blank())
baseWO
base_plot <- function(){
### Define plot area
plot_area = c(-20037508, 20037508, -32493690 + 15000000, 18397474 + 5E+05)
### Get basemap data
wmap <- getMap(resolution="less islands")[-which(getMap()$ADMIN=="Antarctica"),]
wmap = spTransform(wmap, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
wmap = tidy(wmap)
## baseplot
baseWO = ggplot() +
# plot background box
geom_rect(aes(xmin = plot_area[1],xmax = plot_area[2], ymin = plot_area[3], ymax = plot_area[4]),size = 1, color = "black", fill = SOOScol[3])+
# plot whole world
geom_polygon(data =A, aes(x = long, y = lat, group = group),fill = SOOScol[4], colour = SOOScol[4]) +
# plot antarctica. Antarctica is hard! This uses "ant" from the package data
geom_sf(data = ant,fill = SOOScol[4], colour = SOOScol[4]) +
# plot the box border
geom_rect(aes(xmin = plot_area[1],xmax = plot_area[2], ymin = plot_area[3], ymax = plot_area[4]),size = 1, color = "black", fill = NA)+
xlab("") +
ylab("") +
# Change theme to remove axes and ticks
theme(panel.background = element_blank(),legend.position = "none",
panel.grid.minor = element_blank(),axis.ticks=element_blank(), axis.text = element_blank())
return(baseWO)
}
B = base_plot()
plot(B)
