### Calculate centroids
# Create a data from for the centroids of countries. This will allow up to put pins at locations
wmap <- getMap(resolution="less islands")[-which(getMap()$ADMIN=="Antarctica"),]
wmap = spTransform(wmap, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
# get centroids
centroids = gCentroid(wmap, byid=TRUE)
centroids_df = as.data.frame(centroids)
centroids_df = centroids_df[match(sub_Map$id[which(sub_Map$participation == 1)], rownames(centroids_df)),]
### Point to markers PNG files within the downloaded package folder
centroids_df$image1  = marker_png
if(add_marker_dot){centroids_df$image2  = marker_dot_png}
### Plot
# Get baseplot
baseWG = base_plot(...)
# Add centroid markers and colour participating countries
baseWG = baseWG +
# plot SOOS WG countries (single colour)
geom_polygon(data =map_data[participation == 1], aes(x = long, y = lat, group = group), fill = participation_colour, colour = country_border_colour, lwd = country_border_lwd)
# plot the markers. We plot the markers as 2 layers so that the marker centers always appear at the top and are not hidden.
# base marker
if(add_marker){
if(is.null(marker_colour)){
baseWG = baseWG + geom_image(data = centroids_df, aes(x = x, y=y, image = image1), size = 0.01 * marker_size, asp = marker_asp)
}else{baseWG = baseWG + geom_image(data = centroids_df, aes(x = x, y=y, image = image1), size = 0.01 * marker_size, asp = marker_asp, colour = marker_colour)}
}
# dot
if(add_marker_dot){
if(is.null(marker_dot_colour)){
baseWG = baseWG + geom_image(data = centroids_df, aes(x = x, y=y, image = image2), size = 0.01 * marker_size, asp = marker_asp)
}else{baseWG = baseWG + geom_image(data = centroids_df, aes(x = x, y=y, image = image2), size = 0.01 * marker_size, asp = marker_asp, colour = marker_dot_colour)}
}
return(baseWG)
}
plot_WG_map <- function(WG_name, WG_countries, participation_colour = SOOScol[1], country_border_colour = SOOScol[9], country_border_lwd = 1,
marker_colour = NULL, marker_dot_colour = NULL,
marker_size = 2.5, marker_asp = 1.1, marker_png = file.path(.libPaths()[1],"mapSOOSWG", "marker_base.png"),
marker_dot_png = file.path(.libPaths()[1],"mapSOOSWG", "marker_dot.png"),
add_marker = T, add_marker_dot = T, ...){
### Create a map data frame that has an indicator for participating countries
# This will allow us to colour countries
# Note we remove Antarctica because it wont transform niceley
countDF = data.frame(country = WG_countries,
participation = rep(1, length(WG_countries)))
Map = joinCountryData2Map(countDF, joinCode = "ISO3",
nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
# Transofrm to Mercator projection
Map = spTransform(Map, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
map_data = tidy(Map)
# attach map data for plotting
sub_Map =Map@data[,c("ADMIN","ISO3","participation")]
colnames(sub_Map)[1] = c("id")
map_data = data.table(left_join(map_data, sub_Map))
### Calculate centroids
# Create a data from for the centroids of countries. This will allow up to put pins at locations
wmap <- getMap(resolution="less islands")[-which(getMap()$ADMIN=="Antarctica"),]
wmap = spTransform(wmap, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
# get centroids
centroids = gCentroid(wmap, byid=TRUE)
centroids_df = as.data.frame(centroids)
centroids_df = centroids_df[match(sub_Map$id[which(sub_Map$participation == 1)], rownames(centroids_df)),]
### Point to markers PNG files within the downloaded package folder
centroids_df$image1  = marker_png
if(add_marker_dot){centroids_df$image2  = marker_dot_png}
### Plot
# Get baseplot
baseWG = base_plot(...)
# Add centroid markers and colour participating countries
baseWG = baseWG +
# plot SOOS WG countries (single colour)
geom_polygon(data =map_data[participation == 1], aes(x = long, y = lat, group = group), fill = participation_colour, colour = country_border_colour, lwd = country_border_lwd)
# plot the markers. We plot the markers as 2 layers so that the marker centers always appear at the top and are not hidden.
# base marker
if(add_marker){
if(is.null(marker_colour)){
baseWG = baseWG + geom_image(data = centroids_df, aes(x = x, y=y, image = image1), size = 0.01 * marker_size, asp = marker_asp)
}else{baseWG = baseWG + geom_image(data = centroids_df, aes(x = x, y=y, image = image1), size = 0.01 * marker_size, asp = marker_asp, colour = marker_colour)}
}
# dot
if(add_marker_dot){
if(is.null(marker_dot_colour)){
baseWG = baseWG + geom_image(data = centroids_df, aes(x = x, y=y, image = image2), size = 0.01 * marker_size, asp = marker_asp)
}else{baseWG = baseWG + geom_image(data = centroids_df, aes(x = x, y=y, image = image2), size = 0.01 * marker_size, asp = marker_asp, colour = marker_dot_colour)}
}
return(baseWG)
}
plot_WG_map(example_WG_data$Acronym[1], example_WG_data$Countries.Represented[1])
check_country_names <- function(countries, country_names_data){
# unique list of countries
unique_countries = unique(unlist(countries))
# split by comma where an individual is listed with more than one country!
unique_countries = unlist(strsplit(unique_countries,split = ","))
unique_countries = trimws(unique_countries) # trim white space
unique_countries = unique(unique_countries) # make sure unique
# find countries that are not in the lookup table
missing_countries = setdiff(unique_countries, country_names_data$Country)
# if all of the countries are there
if(length(missing_countries) == 0){
#change all names in countries to ISO3 codes and return
check = lapply(countries, function(x){country_names_data$ISO3_name[match(x, country_names_data$Country)]})
}else{
print("Error: Cannot produce plots!")
print(paste("Not all countries are in the lookupfile. Please check the following countries, which are missing in the file:",paste(missing_countries, collapse = ", ")))
check = "Failed"
}
return(check)
}
WG_maps <- function(SOOS_WG_data, outdir, country_names_data, ...){
# prepare data
WG_names = data$Acronym
countries = lapply(data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
# check that all countries to be plotted appear in the country lookup table
check = check_country_names(countries, country_names_data)
if(any(check == "Failed")){break}
countries = check
# loop through WG
for(rw in 1:length(WG_names)){
# make plot object
map = plot_WG_map(WG_names[rw], countries[[rw]], ...)
# save plot
save_map(map,WG_names[rw], outdir)
}
print("Sucess! All maps were created")
}
library(data.table)
library(rgeos)
library(tidyr)
library(rworldmap)
library(broom)
library(tidyverse)
library(ggimage)
library(rgdal)
library(sf)
WG_maps(example_WG_data, "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS/output/test", example_country_data)
WG_maps(example_WG_data, "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS/output/test", example_country_data)
traceback()
example_country_data
example_WG_data
WG_maps(example_WG_data, "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS/output/test", example_country_data)
WG_maps <- function(SOOS_WG_data, outdir, country_names_data, ...){
# prepare data
WG_names = SOOS_WG_data$Acronym
countries = lapply(SOOS_WG_data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
# check that all countries to be plotted appear in the country lookup table
check = check_country_names(countries, country_names_data)
if(any(check == "Failed")){break}
countries = check
# loop through WG
for(rw in 1:length(WG_names)){
# make plot object
map = plot_WG_map(WG_names[rw], countries[[rw]], ...)
# save plot
save_map(map,WG_names[rw], outdir)
}
print("Sucess! All maps were created")
}
WG_maps(example_WG_data, outdir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS/output/test", counexample_country_data)
traceback()
WG_maps(example_WG_data, outdir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS/output/test", example_country_data)
save_map <- function(plot, WG_name, outdir){
p_name = file.path(outdir, gsub(" ","",paste(WG_name, "_membermap_",format(Sys.Date(), "%Y"),".png", sep = "")))
ggsave(p_name, plot =plot , width = 40, height = 25.8, units = "cm",  device = "png") # asp 1.550668
print(paste(WG_name, "map has been saved as",basename(p_name), "in output directory!"))
}
WG_maps(example_WG_data, outdir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS/output/test", example_country_data)
load("./data/ExampleData.rda")
WG_maps(example_WG_data, outdir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS/output/test", example_country_data, background_colour = "red")
# institution data
inst = lapply(SOOS_WG_data$Affiliations, FUN = function(x){unlist(strsplit(x, split = "; "))})
SOOS_WG_data = example_WG_data
# institution data
inst = lapply(SOOS_WG_data$Affiliations, FUN = function(x){unlist(strsplit(x, split = "; "))})
inst
institutions = inst
# unique list of institutions
unique_institutions = unique(unlist(institutions))
# split by comma where an individual is listed with more than one institution!
unique_institutions = unlist(strsplit(unique_institutions,split = ","))
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
institution_names_data = example_institution_data
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Institution)
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
missing_institutions
# split by comma where an individual is listed with more than one institution!
unique_institutions = unlist(strsplit(unique_institutions,split = "/"))
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# split by comma where an individual is listed with more than one institution!
unique_institutions = unlist(strsplit(unique_institutions,split = "\"))
# split by comma where an individual is listed with more than one institution!
unique_institutions = unlist(strsplit(unique_institutions,split = "\""))
# split by comma where an individual is listed with more than one institution!
unique_institutions = unlist(strsplit(unique_institutions,split = "\\"))
# split by comma where an individual is listed with more than one institution!
unique_institutions =gsub("\\","", unique_institutions,fixed = T)
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
missing()
missing_institutions
gsub("\\""","", missing_institutions[[1]],fixed = T)
gsub("\\,"", missing_institutions[[1]],fixed = T)
"
gsub("\\","", missing_institutions[[1]],fixed = T)
gsub("\\","", missing_institutions[[1]])
gsub("[\\]","", missing_institutions[[1]])
gsub("[\]","", missing_institutions[[1]])
gsub("[\\]","", missing_institutions[[1]], fixed = T)
gsub("[\\\\]","", missing_institutions[[1]], fixed = T)
gsub("[\\\"]","", missing_institutions[[1]], fixed = T)
gsub(("\\"),"", missing_institutions[[1]], fixed = T)
gsub(("\\"),"", as.character(missing_institutions[[1]]), fixed = T)
A = missing_institutions[[1]][1:2]
A
A = substr(missing_institutions[[1]],1,2)
A
A = substr(missing_institutions[[1]],1,1)
A
# unique list of institutions
unique_institutions = unique(unlist(institutions))
# split by comma where an individual is listed with more than one institution!
unique_institutions = unlist(strsplit(unique_institutions,split = ","))
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# split by comma where an individual is listed with more than one institution!
# split by comma where an individual is listed with more than one institution!
unique_institutions = gsub("\"","", unique_institutions,fixed = T)
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
missing_institutions
View(SOOS_WG_data)
# unique list of institutions
unique_institutions = unique(unlist(institutions))
# # split by comma where an individual is listed with more than one institution!
# unique_institutions = unlist(strsplit(unique_institutions,split = ","))
# unique_institutions = trimws(unique_institutions) # trim white space
# unique_institutions = unique(unique_institutions) # make sure unique
# split by comma where an individual is listed with more than one institution!
unique_institutions = gsub("\"","", unique_institutions,fixed = T)
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
pmatch(missing_institutions, institution_names_data$Name, duplicates.ok = t)
pmatch(missing_institutions, institution_names_data$Name, duplicates.ok = T)
pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)
missing_institutions
unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))
setdiff(unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)), c(1:length(missing_institutions)))
check_commas = check_commas[!is.na(check_commas)]
check_commas = setdiff(unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)), c(1:length(missing_institutions)))
check_commas = check_commas[!is.na(check_commas)]
length(unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))
[1] NA 10 20  1 11 35 33  2 28 24 19 36 17 13 23  8 32  6 44 12 34 38 39 16 42 21 22 26 30)
length(unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)))
c(1:length(missing_institutions)
)
# to account for the problem of multiple institutions separated by commas, and commas within institution names
# get the indexes of all that dont have partially matching strings in the lookup file
check_commas = setdiff(unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)), c(1:length(missing_institutions)))
unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))
A =
unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))
# to account for the problem of multiple institutions separated by commas, and commas within institution names
# get the indexes of all that dont have partially matching strings in the lookup file
check_commas = setdiff(c(1:length(missing_institutions), unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))))
# to account for the problem of multiple institutions separated by commas, and commas within institution names
# get the indexes of all that dont have partially matching strings in the lookup file
check_commas = setdiff(c(1:length(missing_institutions)), unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))))
# to account for the problem of multiple institutions separated by commas, and commas within institution names
# get the indexes of all that dont have partially matching strings in the lookup file
check_commas = setdiff(c(1:length(missing_institutions)), unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)))
check_commas
check_commas = check_commas[!is.na(check_commas)]
missing_institutions[check_commas]
View(institution_names_data)
missing_institutions
unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T))
# to account for the problem of multiple institutions separated by commas, and commas within institution names
# get the indexes of all that dont have partially matching strings in the lookup file
check_commas = setdiff(c(1:length(missing_institutions)), unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)))
check_commas = check_commas[!is.na(check_commas)]
check_commas
missing_institutions[43]
pmatch(missing_institutions[43], institution_names_data$Name[235])
c(missing_institutions[43], institution_names_data$Name[235])
c(institution_names_data$Name[235],missing_institutions[43])
pmatch( institution_names_data$Name[235],missing_institutions[43])
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
missing_institutions
install.packages(sjmisc)
library(sjmisc)
install.packages("sjmisc")
library(sjmisc)
str_find( institution_names_data$Name[235],missing_institutions[43])
str_find( institution_names_data$Name[235],missing_institutions)
str_find(missing_institutions, institution_names_data$Name[235])
missing_institutions
str_find()
institution_names_data$Name[235]
str_find(missing_institutions, institution_names_data$Name[235], partial = 1)
str_find(missing_institutions, institution_names_data$Name[235])
grepl(missing_institutions, institution_names_data$Name[235])
grepl(institution_names_data$Name[235],missing_institutions)
View(institutions)
which(grepl(institution_names_data$Name[235],missing_institutions))
idx = which(test)
gsub(x,"", missing_institutions[idx])
idx = which(test)
test = grepl(x, missing_institutions)
x = institution_names_data$Name[235]
test = grepl(x, missing_institutions)
idx = which(test)
gsub(x,"", missing_institutions[i])
i = idx
gsub(x,"", missing_institutions[i])
# to account for the problem of multiple institutions separated by commas, and commas within institution names
inst_non_match <- function(x){
test = grepl(x, missing_institutions)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i])
}
}
}
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in missing_institutions){
test = grepl(x, missing_institutions)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i])
}
}
}
missing_institutions
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i])
}
}
}
missing_institutions
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i])
}
}
}
missing_institutions
x = institution_names_data$Name[250]
test = grepl(x, missing_institutions)
test
x
missing_institutions[44]
test = grepl(x, missing_institutions, fixed = T)
x
test
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions, fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i])
}
}
}
missing_institutions
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions, fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i],fixed = T)
}
}
}
missing_institutions
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
grepl("[:alnum:]",missing_institutions)
grepl("[:alpha:]",missing_institutions)
any(grepl("[A-Za-z]",missing_institutions)
# get the indexes of all that dont have partially matching strings in the lookup file
check_commas = setdiff(c(1:length(missing_institutions)), unique(pmatch(institution_names_data$Name,missing_institutions,  duplicates.ok = T)))
check_commas = check_commas[!is.na(check_commas)]
# if there are some that don't have matches
if(length(check_commas) == 0){missing_institutions = NULL}else{missing_institutions = missing_institutions[check_commas]}
# if all of the institutions are there
if(length(missing_institutions) == 0){
#change all names in institutions to ISO3 codes and return
check = lapply(institutions, function(x){institution_names_data[match(x, institution_names_data$Institution),]})
}else{
print("Error: Cannot produce plots!")
print(paste("Not all institutions are in the geocode file. Please check the following institutions, which are missing in the file:",paste(missing_institutions, collapse = ", ")))
check = "Failed"
}
return(check)
}
grepl("[A-Za-z]",missing_institutions)
missing_institutions
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions, fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i],fixed = T)
}
}
}
grepl("[A-Za-z]",missing_institutions)
missing_institutions = missing_institutions[grepl("[A-Za-z]",missing_institutions)]
missingArg()
missing_institutions
check_institution_names <- function(institutions, institution_names_data){
# unique list of institutions
unique_institutions = unique(unlist(institutions))
# # split by comma where an individual is listed with more than one institution!
# unique_institutions = unlist(strsplit(unique_institutions,split = ","))
# unique_institutions = trimws(unique_institutions) # trim white space
# unique_institutions = unique(unique_institutions) # make sure unique
# split by comma where an individual is listed with more than one institution!
unique_institutions = gsub("\"","", unique_institutions,fixed = T)
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions, fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i],fixed = T)
}
}
}
missing_institutions = missing_institutions[grepl("[A-Za-z]",missing_institutions)]
# if all of the institutions are there
if(length(missing_institutions) == 0){
#change all names in institutions to ISO3 codes and return
check = lapply(institutions, function(x){institution_names_data[match(x, institution_names_data$Institution),]})
}else{
print("Error: Cannot produce plots!")
print(paste("Not all institutions are in the geocode file. Please check the following institutions, which are missing in the file:",paste(missing_institutions, collapse = ", ")))
check = "Failed"
}
return(check)
}
check_institution_names(inst, institution_names_data)
check_institution_names <- function(institutions, institution_names_data){
# unique list of institutions
unique_institutions = unique(unlist(institutions))
# # split by comma where an individual is listed with more than one institution!
# unique_institutions = unlist(strsplit(unique_institutions,split = ","))
# unique_institutions = trimws(unique_institutions) # trim white space
# unique_institutions = unique(unique_institutions) # make sure unique
# split by comma where an individual is listed with more than one institution!
unique_institutions = gsub("\"","", unique_institutions,fixed = T)
unique_institutions = trimws(unique_institutions) # trim white space
unique_institutions = unique(unique_institutions) # make sure unique
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# to account for the problem of multiple institutions separated by commas, and commas within institution names
for(x in institution_names_data$Name){
test = grepl(x, missing_institutions, fixed = T)
if(any(test)){
idx = which(test)
for(i in idx){
missing_institutions[i] = gsub(x,"", missing_institutions[i],fixed = T)
}
}
}
missing_institutions = missing_institutions[grepl("[A-Za-z]",missing_institutions)]
# if all of the institutions are there
if(length(missing_institutions) == 0){
#change all names in institutions to lat/lon
check = "Good"
}else{
print("Error: Cannot produce plots!")
print(paste("Not all institutions are in the geocode file. Please check the following institutions, which are missing in the file:",paste(missing_institutions, collapse = ", ")))
check = "Failed"
}
return(check)
}
check_institution_names(inst, institution_names_data)
